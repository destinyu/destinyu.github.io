<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ForFurture</title>
    <link>https://destinyu.github.io/posts/</link>
    <description>Recent content in Posts on ForFurture</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 26 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://destinyu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>字符串的应用</title>
      <link>https://destinyu.github.io/2020/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://destinyu.github.io/2020/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>字符串的应用 跑马灯 import os import time def main(): content = &#39;北京欢迎你为你开天辟地…………&#39; while True: # 清理屏幕上的输出 os.system(&#39;cls&#39;) # os.system(&#39;clear&#39;) print(content) # 休眠200毫秒 time.sleep(0.2) content = content[1:] + content[0] if __name__ == &#39;__main__&#39;: main()  
返回给定文件名的后缀名 def get_suffix(filename, has_dot=False): &amp;quot;&amp;quot;&amp;quot; 获取文件名的后缀名 :param filename: 文件名 :param has_dot: 返回的后缀名是否需要带点 :return: 文件的后缀名 &amp;quot;&amp;quot;&amp;quot; pos = filename.rfind(&#39;.&#39;) if 0 &amp;lt; pos &amp;lt; len(filename) - 1: index = pos if has_dot else pos + 1 return filename[index:] else: return &#39;&#39;</description>
    </item>
    
    <item>
      <title>几个运用python基础知识的小问题</title>
      <link>https://destinyu.github.io/2020/%E5%87%A0%E4%B8%AA%E8%BF%90%E7%94%A8python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://destinyu.github.io/2020/%E5%87%A0%E4%B8%AA%E8%BF%90%E7%94%A8python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</guid>
      <description>斐波那契数列 思路 前两个数都是1，第三个数开始每个数都是前两个数之和
ps：在leetcode中只需要编写方法
方法 class Solution(): def fib(self,N): if N==0: return 0 elif N==1: return 1 else: return self.fib(N - 1) + self.fib(N - 2) num=input(&amp;quot;输入:&amp;quot;) out=Solution() print(out.fib(int(num)))  

素数 思路 只能被1和自身整除的正整数
方法 循环处理
num=[] i=2 for i in range(2,100): for j in range(2,i): if (i%j==0): break else: num.append(i)  

完美数 思路 所有除自身以外的因子的和恰好等于它本身
方法  比较好想的方法：遍历所有数，凡是可以被除开的，都存入列表里面，然后将列表相加得到结果，与原数比较  class Solution_1():#重复判断一次 def checkPerfectNumber(self,x): a=[] num=0 sum=0 for factor in range(int(x),1,-1): if int(x)%factor==0: a.</description>
    </item>
    
    <item>
      <title>python基础知识总结(二)</title>
      <link>https://destinyu.github.io/2020/python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://destinyu.github.io/2020/python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/</guid>
      <description>函数 定义函数  无参数  def function(): print(&amp;quot;this is a function&amp;quot;)   传一个参数  def function(name): print(&amp;quot;hello,&amp;quot;+name)  传递多参数  位置参数（由位置关系关联）  def position_function(a,b): print(a+&amp;quot; need &amp;quot;+b) position_function(&#39;Tom&#39;,&#39;Jerry&#39;)#根据参数的位置决定输出   关键字实参  def key_function(a,b): print(a+&amp;quot; need &amp;quot;+b) key_function(a=&#39;Tom&#39;,b=&#39;Jerry&#39;)#直接由等式决定，可不管顺序   默认值（使用默认值时必须先列出没有默认值的形参）  def default_function(a,b=&#39;Jerry&#39;): print(a+&amp;quot; need &amp;quot;+b) default_function(&#39;Tom&#39;) default_function(a=&#39;Tom&#39;)  返回值  返回简单值  def function(a,b): meaasge=a+&#39; &#39;+b) return message function_back=function(&#39;Tom&#39;,&#39;Jerry&#39;) print(function)   实参可选  def function(a,b,c=&#39;&#39;): if c: print(a+&amp;quot; need &amp;quot;+b+&amp;quot; and &amp;quot;+c) else: print(a+&amp;quot; need &amp;quot;+b) function_back=function(&#39;Tom&#39;,&#39;Jerry&#39;) function_back=function(&#39;Tom&#39;,&#39;Jerry&#39;,&#39;Mike&#39;)   返回字典  def function(a,b): name={&#39;first&#39;:a,&#39;last&#39;:b} return name function_back=function(&#39;Tom&#39;,&#39;Jerry&#39;)  传递列表  把参数看做列表  def function(values): for value in values: print(value) names=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] function(names)   不修改原列表，创建副本  def function(values[:])  传递任意数量的参数  任意数量实参  def function(*names): print(names) function(&#39;a&#39;) function(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)   结合位置实参和任意数量参数  def function(age,*names): print(str(age)+&amp;quot; years old:&amp;quot;) for name in names: print(name) function(12,&#39;a&#39;) function(13,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)   使用任意数量的关键字实参  def function(first,last,**info): dictionary={} dictionary[&#39;first_name&#39;]=first dictionary[&#39;last_name&#39;]=last for key,value in info.</description>
    </item>
    
    <item>
      <title>python基础知识总结(一)</title>
      <link>https://destinyu.github.io/2020/python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://destinyu.github.io/2020/python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>变量与简单数据类型 变量名规范  应使用小写字母 字母之间可以用下划线连接 便于阅读但不能过于省略  字符串操作  单引号和双引号均可，根据实际包含情况来决定
 转换大小写的用法
  string.title()#首字母大写 string.upper()#全部大写 string.lower()#全部小写   合并字符串：+
 添加空白与换行：\t+\n
 删除多余空白
  string.rstrip()#删除末尾空白 string.lstrip()#删除开头空白 string.strip()#删除字符串两端空白  数字  乘方：a**b
 类型转换：
  str(number)   特别注意：  python2：
3&amp;frasl;2=1
3.0/2=1.5
3&amp;frasl;2.0=1.5
3.0/2.0=1.5
python3：
3&amp;frasl;2=1.5
python之禅  Complex is better than complicated Simple is better than complex Now is better than never</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://destinyu.github.io/2020/creating-a-new-theme/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://destinyu.github.io/2020/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>git diff 的用法浅析</title>
      <link>https://destinyu.github.io/2020/git-diff%E7%9A%84%E5%85%B7%E4%BD%93%E7%94%A8%E6%B3%95%E6%B5%85%E6%9E%90/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://destinyu.github.io/2020/git-diff%E7%9A%84%E5%85%B7%E4%BD%93%E7%94%A8%E6%B3%95%E6%B5%85%E6%9E%90/</guid>
      <description>所有用法 Git分为 工作区，暂存区，仓库
git add#把工作区内容放入暂存区  git commit#把暂存区内容提交到仓库  git diff#查看工作区与暂存区差异  git diff --cashed#查看暂存区与仓库差异  git diff HEAD#查看工作区与仓库差异  以新建文件流程从头开始  在工作区新建一个文件（内容为一行文字）  vim new.txt   查看工作区与暂存区区别==（此时暂存区没有东西）==  git diff new.txt  结果为空（没有区别）
 将文件提交到暂存区  git add new.txt  此时暂存区内容与工作区一致，还是没有区别
 修改工作区文件内容（添加一行）  vim new.txt   可以查看一下目前的所有区状态  git status  显示为：
​ 第一个版本的new未commit
​ 第二个修改版本的new未add+commit
（==注意此时若commit则提交的是未修改的第一版==）
各区情况：
 工作区为修改后的两行内容 暂存区为第一次存入的一行内容 仓库为空   查看工作区与暂存区的区别  git diff new.</description>
    </item>
    
  </channel>
</rss>